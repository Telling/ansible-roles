@version:3.7
@include "scl.conf"

#
# these options are suitable for a jailhost syslog-ng which then forwards to a central loghost
#
options {
    chain_hostnames(no);
    flush_lines(0);
    threaded(yes);
    use_fqdn(yes);
    keep_hostname(no);
    use-dns(yes);
    dns-cache-hosts(/etc/hosts);
    stats-freq(60);
    stats-level(0);
}; 

{% if elk_syslogng | default(No) %}
###### sources and destinations suitable for an ELK forwarding syslogng server
source s_remote {
    syslog(
        ip("127.0.0.1")
        port("1999")
        transport("tls")
        tls(
            key_file("/usr/home/{{ certgrinder_user }}/certificates/{{ ansible_nodename }}.key")
            cert_file("/usr/home/{{ certgrinder_user }}/certificates/{{ ansible_nodename }}.crt")
        );
    );
    syslog(
        ip("::1")
        port("1999")
        transport("tls")
        ip-protocol(6)
        tls(
            key_file("/usr/home/{{ certgrinder_user }}/certificates/{{ ansible_nodename }}.key")
            cert_file("/usr/home/{{ certgrinder_user }}/certificates/{{ ansible_nodename }}.crt")
        );
    );
};

destination d_logstash {
        tcp(
                "127.0.0.1"
                port(5000)
                log-fifo-size(100000)
        );
};
log { source(s_remote); source(src); destination(d_logstash); flags(flow_control); };
{% else %}
###### sources and destinations suitable for a jailhost syslog(ng) aggregator
# define source, listen on v4 and v6
source src { udp(ip("127.0.0.1")); udp6(ip("::1")); }; 

# define destination
destination loghost{
    syslog(
        "{{ central_syslog_hostname }}"
        transport("tls")
        port(1999)
        tls(peer-verify(required-trusted))
        log-fifo-size(100000)
    );
};

# send everything from the source to the destination, employ flow-control to avoid loosing messages
log { source(src); destination(loghost); flags(flow-control); }; 
{% endif %}

